<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on Kernels and Cats</title>
    <link>https://kaligulaarmblessed.github.io/categories/ctf/</link>
    <description>Recent content in CTF on Kernels and Cats</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 11 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kaligulaarmblessed.github.io/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Utility Pole: Revengeance -- PageJack [LNC 5.0]</title>
      <link>https://kaligulaarmblessed.github.io/post/utilitypole/</link>
      <pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/utilitypole/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Utility Pole: Revenge (Pt. 1) and Utility Pole: Revengeance (Pt. 2) are a series of collab challenges written by &lt;a href=&#34;https://github.com/adaisyx&#34;&gt;Lambda&lt;/a&gt; and I for LNC 5.0. Part 1 (written by Lambda) was a geo-OSINT challenge where players had to identify the locations of 10 utility poles, and part 2 (written by me) was a kernel pwn challenge. The vulnerability was a 2 null-byte heap overflow, which can be utilized for privilege escalation by employing the PageJack technique.&lt;/p&gt;</description>
    </item>
    <item>
      <title>All I Want for Christmas is a CVE-2024-30085 Exploit</title>
      <link>https://kaligulaarmblessed.github.io/post/exploiting-cldflt/</link>
      <pubDate>Tue, 24 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/exploiting-cldflt/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;CVE-2024-30085 is a heap-based buffer overflow vulnerability affecting the Windows Cloud Files Mini Filter Driver &lt;code&gt;cldflt.sys&lt;/code&gt;. By crafting a custom reparse point, it is possible to trigger the buffer overflow to corrupt an adjacent &lt;code&gt;_WNF_STATE_DATA&lt;/code&gt; object. The corrupted &lt;code&gt;_WNF_STATE_DATA&lt;/code&gt; object can be used to leak a kernel pointer from an ALPC handle table object. A second buffer overflow is then used to corrupt another &lt;code&gt;_WNF_STATE_DATA&lt;/code&gt; object, which is then used to corrupt an adjacent &lt;code&gt;PipeAttribute&lt;/code&gt; object. By forging a &lt;code&gt;PipeAttribute&lt;/code&gt; object in userspace, we are able to leak the token address and override privileges to escalate privileges to NT AUTHORITY\SYSTEM. This blog post can also be found &lt;a href=&#34;https://starlabs.sg/blog/2024/all-i-want-for-christmas-is-a-cve-2024-30085-exploit/&#34;&gt;here&lt;/a&gt; on the official STARLabs page.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dead Pwners Society -- Kernel Oops, Refcount Overflow and USMA [idekCTF 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/dead-pwners-society/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/dead-pwners-society/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Dead Pwners Society is a collab kernel pwn challenge written by Shunt and I for idekCTF 2024. By triggering many kernel oops caused by a null pointer dereference in a vulnerable ioctl function, it is possible to cause a one byte refcount to overflow. By controlling the refcount value, the attacker is able to trigger a UAF on the victim object, which can then be turned into a double free primitive. However, as the kernel is very hardened (CFI, KASLR, SMEP, SMAP, KPTI, etc.), classical kROP techniques would fail (e.g. overwriting pipe_buf_operations to control RIP). The User Space Mapping Attack (USMA) is hence performed in order to patch kernel code sections with the desired shellcode to get root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hardware Challenges [ACSC 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/acsc2024-hardware/</link>
      <pubDate>Thu, 11 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/acsc2024-hardware/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve wanted to learn hardware for a while, so I tried out some hardware challenges at ACSC 2024. Here are the writeups for the 4 hardware challenges I&amp;rsquo;ve managed to solve during the CTF (as well as 1 stray web challenge that I solved because I couldn&amp;rsquo;t get the last hardware chall :&amp;quot;&amp;lt;)!&lt;/p&gt;&#xA;&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#an4lyz3_1t&#34;&gt;An4lyz3_1t&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#vault&#34;&gt;Vault&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#picopico&#34;&gt;picopico&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#pwr_tr4ce&#34;&gt;PWR_Tr4ce&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#login&#34;&gt;Login!&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;an4lyz3_1t&#34;&gt;An4lyz3_1t&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Our surveillance team has managed to tap into a secret serial communication and capture a digital signal using a Saleae logic analyzer. Your objective is to decode the signal and uncover the hidden message.&#xA;&#xA;Authored by Chainfire73&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A &amp;ldquo;chall.sal&amp;rdquo; file was provided, which is the filetype for the Saleae Logic Analyzer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cheminventory [Lag and Crash 4.0]</title>
      <link>https://kaligulaarmblessed.github.io/post/cheminventory/</link>
      <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/cheminventory/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Cheminventory is a kernel pwn challenge dealing with a UAF on an object that is part of a linked list. The UAF could be triggered by allocating more memory than kmalloc is able to service, which would then cause kmalloc to fail, and for the struct chemical object to be freed while it is still part of the linked list. The tricky part of this challenge lies in the exploitation as kernel list protections will perform checks when unlinking objects, hence in order to attain a better primitive such as the ability to free an object, a fake linked list must be forged using controllable objects. Once an arbitrary free on a kmalloc-cg-1024 object has been achieved, the classic pipe_buf spray and RIP control can be used together with a ROP chain to gain root :D&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross Cache for Lazy People -- The Padding Spray Method</title>
      <link>https://kaligulaarmblessed.github.io/post/cross-cache-for-lazy-people/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/cross-cache-for-lazy-people/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;There is a proper way to cross cache (&lt;a href=&#34;https://ruia-ruia.github.io/2022/08/05/CVE-2022-29582-io-uring/#crossing-the-cache-boundary&#34;&gt;documented in wonderful detail by ruia-ruia&lt;/a&gt;) which involves strategically allocating and freeing objects, but some pwners (like me) are lazy. This post is about the &amp;ldquo;spray and pray&amp;rdquo; method of cross cache used by some pwners that still magically works, even if you don&amp;rsquo;t want to do math :D&lt;/p&gt;&#xA;&lt;h4 id=&#34;a-brief-overview-of-kernel-slab-caches&#34;&gt;A Brief Overview of Kernel Slab Caches&lt;/h4&gt;&#xA;&lt;p&gt;Originally all kernel objects were allocated in normal kmalloc caches, but with &lt;a href=&#34;https://lore.kernel.org/lkml/20210505200610.13943-3-longman@redhat.com/&#34;&gt;this&lt;/a&gt; kernel patch, objects allocated with GFP_KERNEL_ACCOUNT would go into a kmalloc-cg cache instead of a normal one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Palindromatic -- Dirtypipe [Bi0sCTF 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/palindromatic-biosctf2024/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/palindromatic-biosctf2024/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Palindromatic is a kernel pwn challenge in Bi0sCTF 2024 involving a null byte overflow vulnerability, cross cache, followed by DirtyPipe. The common kernel protections SMAP, SMEP, KPTI, KASLR are all enabled, with the addition of CONFIG_RANDOM_KMALLOC_CACHES which makes heap spraying more finnicky. Although I did not manage to solve this challenge during the CTF, I thought that this was a really cool challenge and since I wanted to learn how to do a DirtyPipe attack, I made this writeup :D&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Deep Dive into Faronics Deep Freeze Enterprise [Legacy Windows Software]</title>
      <link>https://kaligulaarmblessed.github.io/post/faronics-deep-freeze/</link>
      <pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/faronics-deep-freeze/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Faronics Deep Freeze Enterprise version 8.38.220.5256 is vulnerable to a stack buffer overflow vulnerability. It uses 2 XOR encoding schemes, as well as an additional third checksum, to ensure that the packets sent to it are valid. As DEP is enabled, the stack buffer overflow can be exploited by building a ROP chain with a dummy VirtualAlloc skeleton, patching the arguments in, and performing a stack pivot to call VirtualAlloc and finally return to our shellcode.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Meowcrosoft Word [STANDCON 2023]</title>
      <link>https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Meowcrosoft Word is a kernel pwn challenge where only one allocate, one write, and one free is supposed to be possible. However, by exploiting a race condition and blocking/unblocking threads with FUSE (userfaultfd is disabled), privilege escalation from user to root is possible. timerfd_ctx is used to leak the kernel base, msg_msg is used to leak the kernel heap, and pipe buf is used to control RIP and start off a ROP chain to call prepare_kernel_cred() and commit_creds() to get root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>nftables Adventures: CVE-2023-31248 -- Oh How The Turn Tables! [Part 2]</title>
      <link>https://kaligulaarmblessed.github.io/post/nftables-adventures-2/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/nftables-adventures-2/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;CVE-2023-31248 is an n-day bug affecting nftables reported by Mingi Cho. The bug report and patch can be found here: &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=515ad530795c118f012539ed76d02bacfd426d89&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=515ad530795c118f012539ed76d02bacfd426d89&lt;/a&gt;. Linux kernel versions before 6.2.0-26 generic are vulnerable to this bug. My exploit has been tested on Ubuntu 23.04 (Lunar Lobster), with kernel version 6.2.0-20 generic.&lt;/p&gt;&#xA;&lt;p&gt;The official version of this writeup can be found at this link: &lt;a href=&#34;https://starlabs.sg/blog/2023/09-nftables-adventures-bug-hunting-and-n-day-exploitation/&#34;&gt;https://starlabs.sg/blog/2023/09-nftables-adventures-bug-hunting-and-n-day-exploitation/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;nftable-of-contents&#34;&gt;nfTable of Contents&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#vulnerability-analysis&#34;&gt;Vulnerability Analysis&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#triggering-the-bug-with-a-single-batch-transaction&#34;&gt;Triggering the Bug&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#obtaining-a-use-after-free&#34;&gt;Obtaining a Use-After-Free&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#obtaining-a-kernel-text-leak&#34;&gt;Obtaining a Kernel Text Leak&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#obtaining-a-heap-leak&#34;&gt;Obtaining a Heap Leak&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#controlling-rip&#34;&gt;Controlling RIP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#patch-analysis&#34;&gt;Patch Analysis&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#exploit-demo&#34;&gt;Exploit Demo&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#references-and-credits&#34;&gt;References and Credits&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;vulnerability-analysis&#34;&gt;Vulnerability Analysis&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;nft_chain_lookup_byid&lt;/code&gt; does not check whether a chain is active (by checking the genmask) when looking up a chain, as seen in the code below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>nftables Adventures: An Introduction to Bug Hunting and the Dormant State Bug [Part 1]</title>
      <link>https://kaligulaarmblessed.github.io/post/nftables-adventures-1/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/nftables-adventures-1/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;I tried my hand at bug hunting within the nftables subsystem in the Linux kernel, and managed to find a bug where if the dormant state of a table was toggled in a certain way, the kernel would attempt to deactivate hooks that were never activated in the first place. The bug report can be found here: &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/netfilter/nf_tables_api.c?id=c9bd26513b3a11b3adb3c2ed8a31a01a87173ff1&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/netfilter/nf_tables_api.c?id=c9bd26513b3a11b3adb3c2ed8a31a01a87173ff1&lt;/a&gt;. Unfortunately (or fortunately), the bug cannot be transformed into a UAF as the kernel performs certain checks that prevents us from reaching any interesting frees.&lt;/p&gt;</description>
    </item>
    <item>
      <title>prctl anon_vma_name: An Amusing Linux Kernel Heap Spray</title>
      <link>https://kaligulaarmblessed.github.io/post/prctlheapspray/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/prctlheapspray/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;prctl PR_SET_VMA (PR_SET_VMA_ANON_NAME)&lt;/code&gt; can be used as a (possibly new!) heap spray method targeting the &lt;code&gt;kmalloc-8&lt;/code&gt; to &lt;code&gt;kmalloc-96&lt;/code&gt; caches. The sprayed object, &lt;code&gt;anon_vma_name&lt;/code&gt;, is dynamically sized, and can range from larger than 4 bytes to a maximum of 84 bytes. The object can be easily allocated and freed via the &lt;code&gt;prctl&lt;/code&gt; syscall, and leaked information can be obtained via reading the &lt;code&gt;proc/pid/maps&lt;/code&gt; file. The advantage of this method is that it does not require a cross-cache attack from cg/other caches (unlike other objects such as &lt;code&gt;msg_msg&lt;/code&gt;) as &lt;code&gt;anon_vma_name&lt;/code&gt; is allocated with the &lt;code&gt;GFP_KERNEL&lt;/code&gt; flag.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
