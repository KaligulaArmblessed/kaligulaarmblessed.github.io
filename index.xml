<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernels and Cats</title>
    <link>https://kaligulaarmblessed.github.io/</link>
    <description>Recent content on Kernels and Cats</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 11 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kaligulaarmblessed.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LNC 5.0: Utility Pole</title>
      <link>https://kaligulaarmblessed.github.io/challenges/lnc5-utilitypole/</link>
      <pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/lnc5-utilitypole/</guid>
      <description>&lt;p&gt;This is a two part series written by the wonderful &lt;a href=&#34;https://github.com/deltadeltalambda&#34;&gt;Lambda&lt;/a&gt; and I.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Utility Pole: Revenge (Pt. 1)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;ROP LLC. has attracted spies ever since our website became popular&amp;hellip; too popular. Now all communications must be guarded. Do you know enough about utility poles to pinpoint 10 locations and pass the security check? Make haste, for if you manage to bypass the security check before the next wave, our CISO will grant you early access to our newest data center, as well as crucial company secrets that would aid your journey.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Utility Pole: Revengeance -- PageJack [LNC 5.0]</title>
      <link>https://kaligulaarmblessed.github.io/post/utilitypole/</link>
      <pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/utilitypole/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Utility Pole: Revenge (Pt. 1) and Utility Pole: Revengeance (Pt. 2) are a series of collab challenges written by &lt;a href=&#34;https://github.com/deltadeltalambda&#34;&gt;Lambda&lt;/a&gt; and I for LNC 5.0. Part 1 (written by Lambda) was a geo-OSINT challenge where players had to identify the locations of 10 utility poles, and part 2 (written by me) was a kernel pwn challenge. The vulnerability was a 2 null-byte heap overflow, which can be utilized for privilege escalation by employing the PageJack technique.&lt;/p&gt;</description>
    </item>
    <item>
      <title>STANDCON 2025: Big Bang Theory</title>
      <link>https://kaligulaarmblessed.github.io/challenges/standcon2025-bigbangtheory/</link>
      <pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/standcon2025-bigbangtheory/</guid>
      <description>&lt;h4 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h4&gt;&#xA;&lt;p&gt;Big Bang Theory was the final challenge in a set of three challenges (the first two being the hardware challenge by Justin and the snake game challenge by &lt;a href=&#34;https://mcdulltii.github.io/&#34;&gt;Aaron (@mcdulltii)&lt;/a&gt; respectively) used in Cyber League Finals (run during STANDCON 2025). The theme was &amp;ldquo;Defuse The Device&amp;rdquo;, where two teams of three had two hours to complete as many of the three challenges as possible before we all ðŸ’¥ explode ðŸ’¥&lt;/p&gt;</description>
    </item>
    <item>
      <title>VR Training</title>
      <link>https://kaligulaarmblessed.github.io/challenges/vr-training/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/vr-training/</guid>
      <description>&lt;p&gt;VR Training (Vulnerability Research, but also a play on Virtual Reality &amp;ndash; can you guess where this is from?) is a highly gamified binary exploitation crash course, which was written as a passion project of mine (it even has a funny storyline, just like its inspiration ðŸ˜†). It follows the story of a group of new recruits as they uncover the secrets of cybersecurity megacorporation ROP LLC. &amp;ndash; does ROP LLC. simply provide cybersecurity for the modern world, or is there more than meets the eye?&lt;/p&gt;</description>
    </item>
    <item>
      <title>All I Want for Christmas is a CVE-2024-30085 Exploit</title>
      <link>https://kaligulaarmblessed.github.io/post/exploiting-cldflt/</link>
      <pubDate>Tue, 24 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/exploiting-cldflt/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;CVE-2024-30085 is a heap-based buffer overflow vulnerability affecting the Windows Cloud Files Mini Filter Driver &lt;code&gt;cldflt.sys&lt;/code&gt;. By crafting a custom reparse point, it is possible to trigger the buffer overflow to corrupt an adjacent &lt;code&gt;_WNF_STATE_DATA&lt;/code&gt; object. The corrupted &lt;code&gt;_WNF_STATE_DATA&lt;/code&gt; object can be used to leak a kernel pointer from an ALPC handle table object. A second buffer overflow is then used to corrupt another &lt;code&gt;_WNF_STATE_DATA&lt;/code&gt; object, which is then used to corrupt an adjacent &lt;code&gt;PipeAttribute&lt;/code&gt; object. By forging a &lt;code&gt;PipeAttribute&lt;/code&gt; object in userspace, we are able to leak the token address and override privileges to escalate privileges to NT AUTHORITY\SYSTEM. This blog post can also be found &lt;a href=&#34;https://starlabs.sg/blog/2024/all-i-want-for-christmas-is-a-cve-2024-30085-exploit/&#34;&gt;here&lt;/a&gt; on the official STARLabs page.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AYCEP CTF 2024: Qualifiers and Finals Challenges</title>
      <link>https://kaligulaarmblessed.github.io/challenges/aycep2024-ctf/</link>
      <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/aycep2024-ctf/</guid>
      <description>&lt;p&gt;Here are the challenges from the Advanced Youth Cyber Exploration Camp (AYCEP) Singapore CTF 2024!&lt;/p&gt;&#xA;&lt;p&gt;Qualifiers:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/AYCEP_2024/codec&#34;&gt;codec&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/AYCEP_2024/restaurant&#34;&gt;restaurant&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/AYCEP_2024/powergrid&#34;&gt;powergrid&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Finals:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/AYCEP_2024/sectionAlift&#34;&gt;sectionAlift&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/AYCEP_2024/verysecretstorage&#34;&gt;verysecretstorage&lt;/a&gt; &amp;ndash; This is a kernel pwn challenge&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/AYCEP_2024/utilitypole&#34;&gt;utilitypole&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a sneak peak into the making of the VR Training programme:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://kaligulaarmblessed.github.io/images/aycep-2024/building.jpg&#34; alt=&#34;building&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;This was the original state of the Maverick Insecurity Inc. building before Cryptsaria made an actual nice diagram of it! There were also a ton of other crappy drawings, but those are probably way too crappy to put here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dead Pwners Society -- Kernel Oops, Refcount Overflow and USMA [idekCTF 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/dead-pwners-society/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/dead-pwners-society/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Dead Pwners Society is a collab kernel pwn challenge written by Shunt and I for idekCTF 2024. By triggering many kernel oops caused by a null pointer dereference in a vulnerable ioctl function, it is possible to cause a one byte refcount to overflow. By controlling the refcount value, the attacker is able to trigger a UAF on the victim object, which can then be turned into a double free primitive. However, as the kernel is very hardened (CFI, KASLR, SMEP, SMAP, KPTI, etc.), classical kROP techniques would fail (e.g. overwriting pipe_buf_operations to control RIP). The User Space Mapping Attack (USMA) is hence performed in order to patch kernel code sections with the desired shellcode to get root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>idekCTF 2024: Dead Pwners Society</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2024-dead-pwners-society/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2024-dead-pwners-society/</guid>
      <description>&lt;p&gt;What secrets will you find in this library? User creds are reader:reader&lt;/p&gt;&#xA;&lt;p&gt;The flag is in /dev/sdb&lt;/p&gt;&#xA;&lt;p&gt;Hint: The note for a book is missing, could it be a problem?&lt;/p&gt;&#xA;&lt;p&gt;Collab challenge with &lt;a href=&#34;https://github.com/terawhiz&#34;&gt;Shunt&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Challenge files: &lt;a href=&#34;https://github.com/idekctf/idekctf-2024/tree/main/pwn/dead-pwners-society&#34;&gt;https://github.com/idekctf/idekctf-2024/tree/main/pwn/dead-pwners-society&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Writeup: &lt;a href=&#34;https://kaligulaarmblessed.github.io/post/dead-pwners-society/&#34;&gt;https://kaligulaarmblessed.github.io/post/dead-pwners-society/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part 1: Introduction and Safety</title>
      <link>https://kaligulaarmblessed.github.io/lab-compendium/lab-introduction-and-safety-1/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/lab-compendium/lab-introduction-and-safety-1/</guid>
      <description>&lt;h4 id=&#34;what-is-the-lab-compendium&#34;&gt;What is the Lab Compendium?&lt;/h4&gt;&#xA;&lt;p&gt;The Lab Compendium is a set of organic synthesis tips that I have compiled after working in various synthetic groups over the years. Originally these were kept in a crappy Google Document, but I figured that it may be helpful for other people just starting out in organic synthesis, so I&amp;rsquo;ve decided to put it onto my blog. Currently there is a lack of pictures &amp;ndash; I will hopefully slowly add them in when I am not lazy. This is not an exhaustive guide and will be updated from time to time, but hopefully it is useful!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part 2: Performing Reactions</title>
      <link>https://kaligulaarmblessed.github.io/lab-compendium/lab-performing-reactions-2/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/lab-compendium/lab-performing-reactions-2/</guid>
      <description>&lt;p&gt;This section deals with some of the nitty gritty details of performing reactions in the lab.&lt;/p&gt;&#xA;&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#general-degassing-techniques&#34;&gt;General Degassing Techniques&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#flushing-reaction-vessel-with-nitrogen&#34;&gt;Flushing Reaction Vessel with Nitrogen&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#degassing-empty-tubetube-with-solids-no-solvent&#34;&gt;Degassing empty tube/tube with solids (no solvent)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#degassing-a-solvent-via-sparging-with-nitrogen&#34;&gt;Degassing a solvent via sparging with nitrogen&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#freeze-pump-thaw&#34;&gt;Freeze Pump Thaw&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#weighing&#34;&gt;Weighing&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#weighing-solids-onto-weighing-paper&#34;&gt;Weighing solids onto weighing paper&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#weighing-solids-into-flask&#34;&gt;Weighing solids into flask&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#weighing-liquids-into-flask&#34;&gt;Weighing liquids into flask&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#weighing-product-samples&#34;&gt;Weighing product samples&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#starting-the-reaction&#34;&gt;Starting the Reaction&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#adding-reagents-under-air&#34;&gt;Adding reagents under air&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#adding-reactantssolvent-under-strict-conditions-via-syringe&#34;&gt;Adding reactants/solvent under strict conditions (via syringe)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#stirbars-and-stirring&#34;&gt;Stirbars and stirring&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#setting-up-condenser-balloon-and-water-flow-for-reflux&#34;&gt;Setting up condenser, balloon and water flow for reflux&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#heating&#34;&gt;Heating&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#stopping-reactions&#34;&gt;Stopping Reactions&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#glovebox-usage&#34;&gt;Glovebox Usage&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;general-degassing-techniques&#34;&gt;General Degassing Techniques&lt;/h4&gt;&#xA;&lt;p&gt;Many organic reactions tend to be sensitive to air or water, so it is good practice to degas the flask and reaction mixture before running the reaction. These techniques are more or less in order from least to most strict.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part 3: Workup and Purification</title>
      <link>https://kaligulaarmblessed.github.io/lab-compendium/lab-workup-3/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/lab-compendium/lab-workup-3/</guid>
      <description>&lt;p&gt;Once an experiment has finished running, a workup is performed to isolate the product from starting materials, catalysts, and potential side products. If the purity of the isolated material is still not ideal, further purification is then performed.&lt;/p&gt;&#xA;&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#washing-and-extractions&#34;&gt;Washing and Extractions&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#transferring-into-separating-funnel&#34;&gt;Transferring into separating funnel&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#washing&#34;&gt;Washing&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#extraction&#34;&gt;Extraction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#troubleshooting-dealing-with-emulsions&#34;&gt;Troubleshooting: Dealing with emulsions&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#troubleshooting-dealing-with-solids&#34;&gt;Troubleshooting: Dealing with solids&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#drying-over-sodiummagnesium-sulfate&#34;&gt;Drying over sodium/magnesium sulfate&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#column-chromatography&#34;&gt;Column Chromatography&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#choosing-the-right-column-size-and-length&#34;&gt;Choosing the right column size and length&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#preparing-and-packing-column-dry-packing-method&#34;&gt;Preparing and packing column (dry packing method)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#preparing-the-sample-wet-loading-method&#34;&gt;Preparing the sample (wet loading method)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#loading-the-sample-wet-loading-method&#34;&gt;Loading the sample (wet loading method)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#preparing-the-sample-dry-loading-method&#34;&gt;Preparing the sample (dry loading method)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#loading-the-sample-dry-loading-method&#34;&gt;Loading the sample (dry loading method)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#preparing-and-adding-the-eluent&#34;&gt;Preparing and adding the eluent&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#running-the-column&#34;&gt;Running the column&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#collecting-and-combining-fractions&#34;&gt;Collecting and combining fractions&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#filtering&#34;&gt;Filtering&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#general-filtering-setup-and-notes&#34;&gt;General filtering setup and notes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#filtering-through-cotton-wool-using-filter-funnel&#34;&gt;Filtering through cotton wool using filter funnel&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#filtering-through-filter-paper-using-filter-funnel&#34;&gt;Filtering through filter paper using filter funnel&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#filtering-through-celite-using-fritted-glass-funnel&#34;&gt;Filtering through Celite using fritted glass funnel&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#filtering-through-silica-gel-pad-using-fritted-glass-funnel-silica-plug&#34;&gt;Filtering through silica gel pad using fritted glass funnel (Silica Plug)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#transferring&#34;&gt;Transferring&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#drying&#34;&gt;Drying&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#normal-drying-of-product-rotavap--high-vacuum-pump&#34;&gt;Normal drying of product (Rotavap + High Vacuum Pump)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#removal-of-solvent-using-liquid-nitrogen-and-solvent-trap&#34;&gt;Removal of solvent using liquid nitrogen and solvent trap&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;washing-and-extractions&#34;&gt;Washing and Extractions&lt;/h4&gt;&#xA;&lt;h6 id=&#34;transferring-into-separating-funnel&#34;&gt;Transferring into separating funnel&lt;/h6&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Make sure that tap of the separating funnel is closed, and place a flask under the separating funnel to catch any liquid that falls out.&lt;/li&gt;&#xA;&lt;li&gt;If pouring from reaction/Schlenk tube: Add more of the solvent used to dilute the reaction mixture&lt;/li&gt;&#xA;&lt;li&gt;Hold a magnet outside the tube to make sure the stirbar does not fall out of the tube, or alternatively remove the stirbar from the reaction mixture using a magnetic stick. Hold the mouth of the tube to the mouth of the separating funnel and slowly pour. Make sure that the stream of liquid is constant and strong enough to go into the middle of the separating funnel hole (not too slow &amp;ndash; this will cause leakage down the sides of the funnel; not too fast &amp;ndash; the liquid will spill out).&lt;/li&gt;&#xA;&lt;li&gt;Without removing the tube from the mouth of the separating funnel, use a solvent spray bottle to wash the remaining liquid from the tube into the funnel. Then, wash the mouth of the tube, before carefully tipping the tube backwards.&lt;/li&gt;&#xA;&lt;li&gt;Wash the tube a few times with solvent/water as necessary:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Solvent: Usually about 3 times/until the color of the solvent fades&lt;/li&gt;&#xA;&lt;li&gt;Water: Usually used if there is a large amount of inorganic salt left inside the tube&#xA;Sonicator: Use as necessary to dissolve as much product in as little solvent as possible.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h6 id=&#34;washing&#34;&gt;Washing&lt;/h6&gt;&#xA;&lt;p&gt;Washing is usually done to remove a component from the mixture (e.g. washing with water is commonly used to remove inorganic salts, bases, or DMF/DMSO (urgh))&lt;/p&gt;</description>
    </item>
    <item>
      <title>Part 4: Analysis and Instrument Operation</title>
      <link>https://kaligulaarmblessed.github.io/lab-compendium/lab-equipment-4/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/lab-compendium/lab-equipment-4/</guid>
      <description>&lt;p&gt;This is a compilation of various analysis techniques, as well as some miscellaneous notes on various equipment.&lt;/p&gt;&#xA;&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#thin-layer-chromatography-tlc&#34;&gt;Thin Layer Chromatography (TLC)&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#performing-tlc&#34;&gt;Performing TLC&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#analyzing-a-tlc-plate&#34;&gt;Analyzing a TLC plate&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#troubleshooting-a-tlc&#34;&gt;Troubleshooting a TLC&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#nuclear-magnetic-resonance-nmr&#34;&gt;Nuclear Magnetic Resonance (NMR)&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#preparation-of-sample-from-solid-lazy-method&#34;&gt;Preparation of sample from solid (lazy method)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#preparation-of-sample-from-solid-proper-method&#34;&gt;Preparation of sample from solid (proper method)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#preparation-of-crude-nmr-sample&#34;&gt;Preparation of crude NMR sample&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#matrix-assisted-laser-desorptionionization-maldi&#34;&gt;Matrix-assisted laser desorption/ionization (MALDI)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#rotary-evaporator-rotavap&#34;&gt;Rotary Evaporator (Rotavap)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;thin-layer-chromatography-tlc&#34;&gt;Thin Layer Chromatography (TLC)&lt;/h4&gt;&#xA;&lt;h6 id=&#34;performing-tlc&#34;&gt;Performing TLC&lt;/h6&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Preparing the TLC chamber:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Measure out the required solvents in a measuring cylinder and mix them inside the TLC glass chamber&lt;/li&gt;&#xA;&lt;li&gt;Add a piece of filter paper into the TLC chamber to help the solvent vapor saturate the chamber&lt;/li&gt;&#xA;&lt;li&gt;Close the cap of the TLC chamber (to allow the solvent vapor to saturate the chamber)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Preparing the TLC plate:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Choose a TLC plate that is relatively rectangular in shape and free of scratches/marks/etc&lt;/li&gt;&#xA;&lt;li&gt;Draw a pencil line at the bottom and mark a few spots for the sample dots to be placed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Dotting the sample onto the TLC plate:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Simple sample retrieval:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Quickly dip capillary tube in and out of liquid sample&lt;/li&gt;&#xA;&lt;li&gt;Dot sample onto TLC plate. Blow away excess solvent before dotting again.&lt;/li&gt;&#xA;&lt;li&gt;Check dot with UV light to make sure enough sample is added.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Preparing and taking sample from solid product:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Add minimal organic solvent to a vial containing some of the product.&lt;/li&gt;&#xA;&lt;li&gt;Quickly dip capillary tube in and out of solvent&lt;/li&gt;&#xA;&lt;li&gt;Spot sample onto the TLC plate using the usual procedure. Check to make sure dot is concentrated enough using the UV light&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Taking sample from ongoing reaction:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Stop the stirring in the reaction and open the cap of the reaction flask.&lt;/li&gt;&#xA;&lt;li&gt;Quickly dip the capillary tube into the flask so that it touches the bottom, then remove the capillary tube.&lt;/li&gt;&#xA;&lt;li&gt;Spot the sample onto a TLC plate&lt;/li&gt;&#xA;&lt;li&gt;Replace the stopper on the reaction flask and turn the stirring back on&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Preparing and taking sample from solid starting material:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Using a small, clean spatula, scoop some of the solid starting material into a vial.&lt;/li&gt;&#xA;&lt;li&gt;Add a little bit of organic solvent and dissolve the solid&lt;/li&gt;&#xA;&lt;li&gt;Use a capillary tube to take some sample out of the vial and spot it onto the TLC plate&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Running the TLC plate&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Check that all samples are spotted and have the appropriate concentration using the UV light&lt;/li&gt;&#xA;&lt;li&gt;Using forceps, grab the top of the TLC plate and carefully lower it into the TLC chamber, making sure that it doesnâ€™t fall&lt;/li&gt;&#xA;&lt;li&gt;Put the cap back onto the TLC chamber&lt;/li&gt;&#xA;&lt;li&gt;When the solvent level nearly reaches the top of the plate/wherever you want the solvent front to be, unscrew the cap and remove the TLC plate with forceps&lt;/li&gt;&#xA;&lt;li&gt;Wait for the solvent to evaporate (you can wave the plate around to make this quicker)&lt;/li&gt;&#xA;&lt;li&gt;Check the plate under the UV light&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h6 id=&#34;analyzing-a-tlc-plate&#34;&gt;Analyzing a TLC plate&lt;/h6&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Note position of the spots&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Increase the polarity of the TLC eluent and run the same plate again if:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;There is something on the baseline which composition you are not very sure about (e.g. is the baseline spot one or multiple spots?)&lt;/li&gt;&#xA;&lt;li&gt;Most of the spots have a very low Rf value&lt;/li&gt;&#xA;&lt;li&gt;You want to see what happens if you run the spots at a higher polarity to approximate what would happen if the column was also run at a higher polarity&lt;/li&gt;&#xA;&lt;li&gt;One of the spots looks like it could be made up of two spots&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Run the same plate at the same polarity again if:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You want to see what happens in a column if this polarity is kept&lt;/li&gt;&#xA;&lt;li&gt;You want to see whether separation improves at the same polarity if more solvent is used&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Note the color of the spots&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Some spots may fluoresce under UV light (pretty!)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Note the concentration of the spots (also depends on the concentration of the initial spot)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In some reactions with good conversion, the TLC spot for the product tends to be very concentrated and large&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Note the shape of the spot&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Amines tend to drag, leaving a streaky spot&lt;/li&gt;&#xA;&lt;li&gt;This is also true when a column is performed &amp;ndash; amines tend to be streaky and annoying&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Note any unknown spots&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Some things do not show up on TLC: E.g. B2pin2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use a Mo reagent to force this spot to show up&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Other common reagents used to reveal spots:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2,4-DNPH&lt;/li&gt;&#xA;&lt;li&gt;KMnO4&lt;/li&gt;&#xA;&lt;li&gt;Iodine in silica&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;A note about polarity of eluent:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For column chromatography, the ideal eluent is one that gives Rf 0.3 for the product spot&lt;/li&gt;&#xA;&lt;li&gt;To determine polarity of eluent for column, always start with a lower polarity and slowly increase until you find the perfect polarity&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Low polarity: About 200:1 Hex:EA to 50:1 Hex:EA&lt;/li&gt;&#xA;&lt;li&gt;Mid polarity: About 50:1 Hex:EA to 10:1 Hex:EA&lt;/li&gt;&#xA;&lt;li&gt;High polarity: About 5:1 Hex:EA to 1:5 Hex:EA&lt;/li&gt;&#xA;&lt;li&gt;Very high polarity: Use DCM:MeOH&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;DCM should be added in the TLC eluent if it is to be added as a part of the eluent ratio for the column&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h6 id=&#34;troubleshooting-a-tlc&#34;&gt;Troubleshooting a TLC&lt;/h6&gt;&#xA;&lt;p&gt;What happens if:&#xA;My TLC plate falls inside the TLC chamber?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hardware Challenges [ACSC 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/acsc2024-hardware/</link>
      <pubDate>Thu, 11 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/acsc2024-hardware/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve wanted to learn hardware for a while, so I tried out some hardware challenges at ACSC 2024. Here are the writeups for the 4 hardware challenges I&amp;rsquo;ve managed to solve during the CTF (as well as 1 stray web challenge that I solved because I couldn&amp;rsquo;t get the last hardware chall :&amp;quot;&amp;lt;)!&lt;/p&gt;&#xA;&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#an4lyz3_1t&#34;&gt;An4lyz3_1t&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#vault&#34;&gt;Vault&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#picopico&#34;&gt;picopico&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#pwr_tr4ce&#34;&gt;PWR_Tr4ce&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#login&#34;&gt;Login!&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;an4lyz3_1t&#34;&gt;An4lyz3_1t&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Our surveillance team has managed to tap into a secret serial communication and capture a digital signal using a Saleae logic analyzer. Your objective is to decode the signal and uncover the hidden message.&#xA;&#xA;Authored by Chainfire73&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A &amp;ldquo;chall.sal&amp;rdquo; file was provided, which is the filetype for the Saleae Logic Analyzer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>M53 Sharing Session: Introduction to Kernel Exploitation</title>
      <link>https://kaligulaarmblessed.github.io/challenges/m53-introduction-to-kernel-pwn/</link>
      <pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/m53-introduction-to-kernel-pwn/</guid>
      <description>&lt;p&gt;Here are the slides from the Introduction to Kernel Exploitation session hosted by M53 and RE:HACK, hope you&amp;rsquo;ve enjoyed it!&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vRHa-Zli8yfdp9HAhC9lOiAfMZqlycZq9yOjeb6Th2tLC8XhQ5YspIyTzvebrrUN2hdSFPfIdTgvp3h/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>Cheminventory [Lag and Crash 4.0]</title>
      <link>https://kaligulaarmblessed.github.io/post/cheminventory/</link>
      <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/cheminventory/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Cheminventory is a kernel pwn challenge dealing with a UAF on an object that is part of a linked list. The UAF could be triggered by allocating more memory than kmalloc is able to service, which would then cause kmalloc to fail, and for the struct chemical object to be freed while it is still part of the linked list. The tricky part of this challenge lies in the exploitation as kernel list protections will perform checks when unlinking objects, hence in order to attain a better primitive such as the ability to free an object, a fake linked list must be forged using controllable objects. Once an arbitrary free on a kmalloc-cg-1024 object has been achieved, the classic pipe_buf spray and RIP control can be used together with a ROP chain to gain root :D&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross Cache for Lazy People -- The Padding Spray Method</title>
      <link>https://kaligulaarmblessed.github.io/post/cross-cache-for-lazy-people/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/cross-cache-for-lazy-people/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;There is a proper way to cross cache (&lt;a href=&#34;https://ruia-ruia.github.io/2022/08/05/CVE-2022-29582-io-uring/#crossing-the-cache-boundary&#34;&gt;documented in wonderful detail by ruia-ruia&lt;/a&gt;) which involves strategically allocating and freeing objects, but some pwners (like me) are lazy. This post is about the &amp;ldquo;spray and pray&amp;rdquo; method of cross cache used by some pwners that still magically works, even if you don&amp;rsquo;t want to do math :D&lt;/p&gt;&#xA;&lt;h4 id=&#34;a-brief-overview-of-kernel-slab-caches&#34;&gt;A Brief Overview of Kernel Slab Caches&lt;/h4&gt;&#xA;&lt;p&gt;Originally all kernel objects were allocated in normal kmalloc caches, but with &lt;a href=&#34;https://lore.kernel.org/lkml/20210505200610.13943-3-longman@redhat.com/&#34;&gt;this&lt;/a&gt; kernel patch, objects allocated with GFP_KERNEL_ACCOUNT would go into a kmalloc-cg cache instead of a normal one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LNC 4.0: Cheminventory</title>
      <link>https://kaligulaarmblessed.github.io/challenges/lnc4-cheminventory/</link>
      <pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/lnc4-cheminventory/</guid>
      <description>&lt;p&gt;Storing explosive chemicals in the kernel is a wonderful idea! Surely nothing can go wrong&amp;hellip;right?&lt;/p&gt;&#xA;&lt;p&gt;Challenge files: &lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Cheminventory&#34;&gt;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Cheminventory&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Writeup: &lt;a href=&#34;https://kaligulaarmblessed.github.io/post/cheminventory/&#34;&gt;https://kaligulaarmblessed.github.io/post/cheminventory/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;setting-up-a-kernel-debugging-station&#34;&gt;Setting Up A Kernel Debugging Station&lt;/h4&gt;&#xA;&lt;p&gt;Usually when you get a kernel challenge, the following files will be provided:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bzImage: A compressed version of the kernel&lt;/li&gt;&#xA;&lt;li&gt;cheminventory.ko: The vulnerable kernel module&lt;/li&gt;&#xA;&lt;li&gt;config: The .config file used when the kernel was compiled &amp;ndash; important in figuring out which protections are present&lt;/li&gt;&#xA;&lt;li&gt;initramfs.cpio.gs: A compressed filesystem&lt;/li&gt;&#xA;&lt;li&gt;run.sh: A shell script that starts qemu to run the kernel challenge &amp;ndash; also important in figuring out which protections are present&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The objective of a kernel challenge is usually &lt;strong&gt;to obtain privilege escalation from the provided normal user to the root user&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LNC 4.0: Welcome2Pwn</title>
      <link>https://kaligulaarmblessed.github.io/challenges/lnc4-welcome2pwn/</link>
      <pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/lnc4-welcome2pwn/</guid>
      <description>&lt;p&gt;What better way to learn pwn than to go on a trip to the beach? (Because there are shells!)&lt;/p&gt;&#xA;&lt;p&gt;Challenge files: &lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Welcome2Pwn&#34;&gt;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Welcome2Pwn&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;welcome2pwn&#34;&gt;Welcome2Pwn&lt;/h4&gt;&#xA;&lt;p&gt;Welcome to the land of pwn! Come follow me to the beach; however, make sure to ignore Sally standing sadly at the side selling shells. Who needs to buy shells when we can pop our own? :D&lt;/p&gt;&#xA;&lt;h4 id=&#34;but-first-what-is-pwn&#34;&gt;But first&amp;hellip; What is pwn?&lt;/h4&gt;&#xA;&lt;p&gt;The fancy name for pwn is binary exploitation. Pwn is the art of crafting a custom exploit to hack a vulnerable program (often called a binary), be it one that is running on a remote server, or the operating system kernel itself! This will be an (almost) step-by-step guide to pwning your very first binary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Palindromatic -- Dirtypipe [Bi0sCTF 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/palindromatic-biosctf2024/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/palindromatic-biosctf2024/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Palindromatic is a kernel pwn challenge in Bi0sCTF 2024 involving a null byte overflow vulnerability, cross cache, followed by DirtyPipe. The common kernel protections SMAP, SMEP, KPTI, KASLR are all enabled, with the addition of CONFIG_RANDOM_KMALLOC_CACHES which makes heap spraying more finnicky. Although I did not manage to solve this challenge during the CTF, I thought that this was a really cool challenge and since I wanted to learn how to do a DirtyPipe attack, I made this writeup :D&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Deep Dive into Faronics Deep Freeze Enterprise [Legacy Windows Software]</title>
      <link>https://kaligulaarmblessed.github.io/post/faronics-deep-freeze/</link>
      <pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/faronics-deep-freeze/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Faronics Deep Freeze Enterprise version 8.38.220.5256 is vulnerable to a stack buffer overflow vulnerability. It uses 2 XOR encoding schemes, as well as an additional third checksum, to ensure that the packets sent to it are valid. As DEP is enabled, the stack buffer overflow can be exploited by building a ROP chain with a dummy VirtualAlloc skeleton, patching the arguments in, and performing a stack pivot to call VirtualAlloc and finally return to our shellcode.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Meowcrosoft Word [STANDCON 2023]</title>
      <link>https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;Meowcrosoft Word is a kernel pwn challenge where only one allocate, one write, and one free is supposed to be possible. However, by exploiting a race condition and blocking/unblocking threads with FUSE (userfaultfd is disabled), privilege escalation from user to root is possible. timerfd_ctx is used to leak the kernel base, msg_msg is used to leak the kernel heap, and pipe buf is used to control RIP and start off a ROP chain to call prepare_kernel_cred() and commit_creds() to get root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>STANDCON 2023: Meowcrosoft Word</title>
      <link>https://kaligulaarmblessed.github.io/challenges/standcon2023-meowcrosoft-word/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/standcon2023-meowcrosoft-word/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve got a new installation of Meowcrosoft Word V1.0 TM! But as part of the #linuxmasterrace, I want to prove that it is vulnerable! Can you help me root this box?&lt;/p&gt;&#xA;&lt;p&gt;Challenge files: &lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Meowcrosoft_Word&#34;&gt;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Meowcrosoft_Word&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Writeup: &lt;a href=&#34;https://kaligulaarmblessed.github.io/post/meowcrosoft-word/&#34;&gt;https://kaligulaarmblessed.github.io/post/meowcrosoft-word/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>nftables Adventures: CVE-2023-31248 -- Oh How The Turn Tables! [Part 2]</title>
      <link>https://kaligulaarmblessed.github.io/post/nftables-adventures-2/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/nftables-adventures-2/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;CVE-2023-31248 is an n-day bug affecting nftables reported by Mingi Cho. The bug report and patch can be found here: &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=515ad530795c118f012539ed76d02bacfd426d89&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=515ad530795c118f012539ed76d02bacfd426d89&lt;/a&gt;. Linux kernel versions before 6.2.0-26 generic are vulnerable to this bug. My exploit has been tested on Ubuntu 23.04 (Lunar Lobster), with kernel version 6.2.0-20 generic.&lt;/p&gt;&#xA;&lt;p&gt;The official version of this writeup can be found at this link: &lt;a href=&#34;https://starlabs.sg/blog/2023/09-nftables-adventures-bug-hunting-and-n-day-exploitation/&#34;&gt;https://starlabs.sg/blog/2023/09-nftables-adventures-bug-hunting-and-n-day-exploitation/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;nftable-of-contents&#34;&gt;nfTable of Contents&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#vulnerability-analysis&#34;&gt;Vulnerability Analysis&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#triggering-the-bug-with-a-single-batch-transaction&#34;&gt;Triggering the Bug&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#obtaining-a-use-after-free&#34;&gt;Obtaining a Use-After-Free&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#obtaining-a-kernel-text-leak&#34;&gt;Obtaining a Kernel Text Leak&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#obtaining-a-heap-leak&#34;&gt;Obtaining a Heap Leak&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#controlling-rip&#34;&gt;Controlling RIP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#patch-analysis&#34;&gt;Patch Analysis&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#exploit-demo&#34;&gt;Exploit Demo&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#references-and-credits&#34;&gt;References and Credits&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;vulnerability-analysis&#34;&gt;Vulnerability Analysis&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;nft_chain_lookup_byid&lt;/code&gt; does not check whether a chain is active (by checking the genmask) when looking up a chain, as seen in the code below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>nftables Adventures: An Introduction to Bug Hunting and the Dormant State Bug [Part 1]</title>
      <link>https://kaligulaarmblessed.github.io/post/nftables-adventures-1/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/nftables-adventures-1/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;I tried my hand at bug hunting within the nftables subsystem in the Linux kernel, and managed to find a bug where if the dormant state of a table was toggled in a certain way, the kernel would attempt to deactivate hooks that were never activated in the first place. The bug report can be found here: &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/netfilter/nf_tables_api.c?id=c9bd26513b3a11b3adb3c2ed8a31a01a87173ff1&#34;&gt;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/netfilter/nf_tables_api.c?id=c9bd26513b3a11b3adb3c2ed8a31a01a87173ff1&lt;/a&gt;. Unfortunately (or fortunately), the bug cannot be transformed into a UAF as the kernel performs certain checks that prevents us from reaching any interesting frees.&lt;/p&gt;</description>
    </item>
    <item>
      <title>prctl anon_vma_name: An Amusing Linux Kernel Heap Spray</title>
      <link>https://kaligulaarmblessed.github.io/post/prctlheapspray/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/prctlheapspray/</guid>
      <description>&lt;h4 id=&#34;tldr&#34;&gt;TLDR&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;prctl PR_SET_VMA (PR_SET_VMA_ANON_NAME)&lt;/code&gt; can be used as a (possibly new!) heap spray method targeting the &lt;code&gt;kmalloc-8&lt;/code&gt; to &lt;code&gt;kmalloc-96&lt;/code&gt; caches. The sprayed object, &lt;code&gt;anon_vma_name&lt;/code&gt;, is dynamically sized, and can range from larger than 4 bytes to a maximum of 84 bytes. The object can be easily allocated and freed via the &lt;code&gt;prctl&lt;/code&gt; syscall, and leaked information can be obtained via reading the &lt;code&gt;proc/pid/maps&lt;/code&gt; file. The advantage of this method is that it does not require a cross-cache attack from cg/other caches (unlike other objects such as &lt;code&gt;msg_msg&lt;/code&gt;) as &lt;code&gt;anon_vma_name&lt;/code&gt; is allocated with the &lt;code&gt;GFP_KERNEL&lt;/code&gt; flag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>idekCTF 2022*: Gone Fishing</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2022-gone-fishing/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2022-gone-fishing/</guid>
      <description>&lt;p&gt;Fishing is a great hobby; if you look around very very carefully you are bound to get hooked!&lt;/p&gt;&#xA;&lt;p&gt;This is a boot2root challenge with a rev twist. Participants were not given source; just run the Docker container!&lt;/p&gt;&#xA;&lt;p&gt;Challenge files: &lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Gone_Fishing&#34;&gt;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Gone_Fishing&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>idekCTF 2022*: Sus Meow</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2022-sus-meow/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2022-sus-meow/</guid>
      <description>&lt;p&gt;I see a bunch of cats talking to each other, but what are they really saying?&lt;/p&gt;&#xA;&lt;p&gt;Collab challenge with the wonderful Mochi Nishimiya.&lt;/p&gt;&#xA;&lt;p&gt;Challenge files: &lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Sus_Meow&#34;&gt;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Sus_Meow&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>STANDCON 2022: New Math</title>
      <link>https://kaligulaarmblessed.github.io/challenges/standcon2022-newmath/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/standcon2022-newmath/</guid>
      <description>&lt;p&gt;New Math! New Hoo Hoo Math!&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UIKGV2cTgqA&#34;&gt;https://www.youtube.com/watch?v=UIKGV2cTgqA&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Challenge files: &lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/New_Math&#34;&gt;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/New_Math&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CYS Sharing Session: Introduction to ROP</title>
      <link>https://kaligulaarmblessed.github.io/challenges/cys-introduction-to-rop/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/cys-introduction-to-rop/</guid>
      <description>&lt;iframe src=&#34;https://docs.google.com/presentation/d/1yJ9marK79AcpgFV9ZkLphP2btJ98yIK2cKfbW8YyWPc/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;960&#34; height=&#34;569&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>idekCTF 2021: Are you lstening to me??</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2021-are-you-lstening-to-me/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2021-are-you-lstening-to-me/</guid>
      <description>&lt;p&gt;Yo lsten! That&amp;rsquo;s the sound of a flag fluttering somewhere&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;docker pull kaligulasec/idekctf2021:are_you_lstening_to_me&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>idekCTF 2021: Retrosynthesis</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2021-retrosynthesis/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2021-retrosynthesis/</guid>
      <description>&lt;p&gt;You can do reverse engineering, but can you do retrosynthesis?&lt;/p&gt;&#xA;&lt;p&gt;Challenge files: &lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Retrosynthesis&#34;&gt;https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Retrosynthesis&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Writeup: &lt;a href=&#34;https://github.com/KaligulaArmblessed/CTF-Writeups/blob/main/idekCTF%202021/Retrosynthesis.md&#34;&gt;https://github.com/KaligulaArmblessed/CTF-Writeups/blob/main/idekCTF%202021/Retrosynthesis.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://kaligulaarmblessed.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/about/</guid>
      <description>&lt;p&gt;I really like computers, chemistry and cats. :3&lt;/p&gt;&#xA;&lt;p&gt;Favicon drawn by the wonderful Cryptsaria.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CVEs</title>
      <link>https://kaligulaarmblessed.github.io/cves/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/cves/</guid>
      <description>&lt;p&gt;CVEs that I&amp;rsquo;ve found (hopefully more to come!):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-49683&#34;&gt;CVE-2025-49683&lt;/a&gt;: Microsoft Virtual Hard Disk Remote Code Execution Vulnerability&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-49721&#34;&gt;CVE-2025-49721&lt;/a&gt;: Windows Fast FAT File System Driver Elevation of Privilege Vulnerability&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Random Fun Facts</title>
      <link>https://kaligulaarmblessed.github.io/random-facts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/random-facts/</guid>
      <description>&lt;p&gt;Just a collection of random fun facts :D&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#ethanol-becomes-gloopy-at-low-temperatures&#34;&gt;Gloopy ethanol&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#supercooled-water-and-strawberries&#34;&gt;Supercooled water and strawberries&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#i-tried-explaining-rop-chains-to-an-ai&#34;&gt;I tried explaining ROP chains to an AI&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#boc-protecting-groups-falling-off-at-high-temperatures-may-be-due-to-a-pericyclic-reaction&#34;&gt;Pericyclic Boc Deprotection&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#vinitus-ciudad-condal-and-cervecer%C3%ADa-catalana-are-basically-the-same-restaurant&#34;&gt;I went to the same restaurant 3 times without knowing&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#shiny-chemistry-all-from-coffee&#34;&gt;Shiny Chemistry, All from Coffee&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#extracting-dna-from-strawberries&#34;&gt;Extracting DNA from Strawberries&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;ethanol-becomes-gloopy-at-low-temperatures&#34;&gt;Ethanol becomes gloopy at low temperatures&lt;/h4&gt;&#xA;&lt;p&gt;Did you know that ethanol has a freezing point of -114.1Â°C :O&lt;/p&gt;&#xA;&lt;p&gt;If you cool ethanol down to a decently low temperature (say -50Â°C and lower), its viscosity will increase quite noticably, and it will turn from a nice flowy liquid to this strange thick gloopy substance. It does definitely make sense for the viscosity of a liquid to increase with decreasing temperature, but I guess we just don&amp;rsquo;t notice it that much with water as the freezing point of water is not very low.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
