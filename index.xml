<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernels and Cats</title>
    <link>https://kaligulaarmblessed.github.io/</link>
    <description>Recent content on Kernels and Cats</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kaligulaarmblessed.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dead Pwners Society -- Kernel Oops, Refcount Overflow and USMA [idekCTF 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/dead-pwners-society/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/dead-pwners-society/</guid>
      <description>TLDR Dead Pwners Society is a collab kernel pwn challenge written by Shunt and I for idekCTF 2024. By triggering many kernel oops caused by a null pointer dereference in a vulnerable ioctl function, it is possible to cause a one byte refcount to overflow. By controlling the refcount value, the attacker is able to trigger a UAF on the victim object, which can then be turned into a double free primitive.</description>
    </item>
    <item>
      <title>idekCTF 2024: Dead Pwners Society</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2024-dead-pwners-society/</link>
      <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2024-dead-pwners-society/</guid>
      <description>What secrets will you find in this library? User creds are reader:reader&#xA;The flag is in /dev/sdb&#xA;Hint: The note for a book is missing, could it be a problem?&#xA;Collab challenge with Shunt.&#xA;Challenge files: https://github.com/idekctf/idekctf-2024/tree/main/pwn/dead-pwners-society&#xA;Writeup: https://kaligulaarmblessed.github.io/post/dead-pwners-society/</description>
    </item>
    <item>
      <title>Part 1: Introduction and Safety</title>
      <link>https://kaligulaarmblessed.github.io/lab-compendium/lab-introduction-and-safety-1/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/lab-compendium/lab-introduction-and-safety-1/</guid>
      <description>What is the Lab Compendium? The Lab Compendium is a set of organic synthesis tips that I have compiled after working in various synthetic groups over the years. Originally these were kept in a crappy Google Document, but I figured that it may be helpful for other people just starting out in organic synthesis, so I&amp;rsquo;ve decided to put it onto my blog. Currently there is a lack of pictures &amp;ndash; I will hopefully slowly add them in when I am not lazy.</description>
    </item>
    <item>
      <title>Part 2: Performing Reactions</title>
      <link>https://kaligulaarmblessed.github.io/lab-compendium/lab-performing-reactions-2/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/lab-compendium/lab-performing-reactions-2/</guid>
      <description>This section deals with some of the nitty gritty details of performing reactions in the lab.&#xA;Table of Contents General Degassing Techniques Flushing Reaction Vessel with Nitrogen Degassing empty tube/tube with solids (no solvent) Degassing a solvent via sparging with nitrogen Freeze Pump Thaw Weighing Weighing solids onto weighing paper Weighing solids into flask Weighing liquids into flask Weighing product samples Starting the Reaction Adding reagents under air Adding reactants/solvent under strict conditions (via syringe) Stirbars and stirring Setting up condenser, balloon and water flow for reflux Heating Stopping Reactions Glovebox Usage General Degassing Techniques Many organic reactions tend to be sensitive to air or water, so it is good practice to degas the flask and reaction mixture before running the reaction.</description>
    </item>
    <item>
      <title>Part 3: Workup and Purification</title>
      <link>https://kaligulaarmblessed.github.io/lab-compendium/lab-workup-3/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/lab-compendium/lab-workup-3/</guid>
      <description>Once an experiment has finished running, a workup is performed to isolate the product from starting materials, catalysts, and potential side products. If the purity of the isolated material is still not ideal, further purification is then performed.&#xA;Table of Contents Washing and Extractions Transferring into separating funnel Washing Extraction Troubleshooting: Dealing with emulsions Troubleshooting: Dealing with solids Drying over sodium/magnesium sulfate Column Chromatography Choosing the right column size and length Preparing and packing column (dry packing method) Preparing the sample (wet loading method) Loading the sample (wet loading method) Preparing the sample (dry loading method) Loading the sample (dry loading method) Preparing and adding the eluent Running the column Collecting and combining fractions Filtering General filtering setup and notes Filtering through cotton wool using filter funnel Filtering through filter paper using filter funnel Filtering through Celite using fritted glass funnel Filtering through silica gel pad using fritted glass funnel (Silica Plug) Transferring Drying Normal drying of product (Rotavap + High Vacuum Pump) Removal of solvent using liquid nitrogen and solvent trap Washing and Extractions Transferring into separating funnel Make sure that tap of the separating funnel is closed, and place a flask under the separating funnel to catch any liquid that falls out.</description>
    </item>
    <item>
      <title>Part 4: Analysis and Instrument Operation</title>
      <link>https://kaligulaarmblessed.github.io/lab-compendium/lab-equipment-4/</link>
      <pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/lab-compendium/lab-equipment-4/</guid>
      <description>This is a compilation of various analysis techniques, as well as some miscellaneous notes on various equipment.&#xA;Table of Contents Thin Layer Chromatography (TLC) Performing TLC Analyzing a TLC plate Troubleshooting a TLC Nuclear Magnetic Resonance (NMR) Preparation of sample from solid (lazy method) Preparation of sample from solid (proper method) Preparation of crude NMR sample Matrix-assisted laser desorption/ionization (MALDI) Rotary Evaporator (Rotavap) Thin Layer Chromatography (TLC) Performing TLC Preparing the TLC chamber: Measure out the required solvents in a measuring cylinder and mix them inside the TLC glass chamber Add a piece of filter paper into the TLC chamber to help the solvent vapor saturate the chamber Close the cap of the TLC chamber (to allow the solvent vapor to saturate the chamber) Preparing the TLC plate: Choose a TLC plate that is relatively rectangular in shape and free of scratches/marks/etc Draw a pencil line at the bottom and mark a few spots for the sample dots to be placed Dotting the sample onto the TLC plate: Simple sample retrieval: Quickly dip capillary tube in and out of liquid sample Dot sample onto TLC plate.</description>
    </item>
    <item>
      <title>Hardware Challenges [ACSC 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/acsc2024-hardware/</link>
      <pubDate>Thu, 11 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/acsc2024-hardware/</guid>
      <description>TLDR I&amp;rsquo;ve wanted to learn hardware for a while, so I tried out some hardware challenges at ACSC 2024. Here are the writeups for the 4 hardware challenges I&amp;rsquo;ve managed to solve during the CTF (as well as 1 stray web challenge that I solved because I couldn&amp;rsquo;t get the last hardware chall :&amp;quot;&amp;lt;)!&#xA;Table of Contents An4lyz3_1t Vault picopico PWR_Tr4ce Login! An4lyz3_1t Our surveillance team has managed to tap into a secret serial communication and capture a digital signal using a Saleae logic analyzer.</description>
    </item>
    <item>
      <title>M53 Sharing Session: Introduction to Kernel Exploitation</title>
      <link>https://kaligulaarmblessed.github.io/challenges/m53-introduction-to-kernel-pwn/</link>
      <pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/m53-introduction-to-kernel-pwn/</guid>
      <description>Here are the slides from the Introduction to Kernel Exploitation session hosted by M53 and RE:HACK, hope you&amp;rsquo;ve enjoyed it!</description>
    </item>
    <item>
      <title>Cheminventory [Lag and Crash 4.0]</title>
      <link>https://kaligulaarmblessed.github.io/post/cheminventory/</link>
      <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/cheminventory/</guid>
      <description>TLDR Cheminventory is a kernel pwn challenge dealing with a UAF on an object that is part of a linked list. The UAF could be triggered by allocating more memory than kmalloc is able to service, which would then cause kmalloc to fail, and for the struct chemical object to be freed while it is still part of the linked list. The tricky part of this challenge lies in the exploitation as kernel list protections will perform checks when unlinking objects, hence in order to attain a better primitive such as the ability to free an object, a fake linked list must be forged using controllable objects.</description>
    </item>
    <item>
      <title>Cross Cache for Lazy People -- The Padding Spray Method</title>
      <link>https://kaligulaarmblessed.github.io/post/cross-cache-for-lazy-people/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/cross-cache-for-lazy-people/</guid>
      <description>TLDR There is a proper way to cross cache (documented in wonderful detail by ruia-ruia) which involves strategically allocating and freeing objects, but some pwners (like me) are lazy. This post is about the &amp;ldquo;spray and pray&amp;rdquo; method of cross cache used by some pwners that still magically works, even if you don&amp;rsquo;t want to do math :D&#xA;A Brief Overview of Kernel Slab Caches Originally all kernel objects were allocated in normal kmalloc caches, but with this kernel patch, objects allocated with GFP_KERNEL_ACCOUNT would go into a kmalloc-cg cache instead of a normal one.</description>
    </item>
    <item>
      <title>LNC 4.0: Cheminventory</title>
      <link>https://kaligulaarmblessed.github.io/challenges/lnc4-cheminventory/</link>
      <pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/lnc4-cheminventory/</guid>
      <description>Storing explosive chemicals in the kernel is a wonderful idea! Surely nothing can go wrong&amp;hellip;right?&#xA;Challenge files: https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Cheminventory&#xA;Writeup: https://kaligulaarmblessed.github.io/post/cheminventory/&#xA;Setting Up A Kernel Debugging Station Usually when you get a kernel challenge, the following files will be provided:&#xA;bzImage: A compressed version of the kernel cheminventory.ko: The vulnerable kernel module config: The .config file used when the kernel was compiled &amp;ndash; important in figuring out which protections are present initramfs.</description>
    </item>
    <item>
      <title>LNC 4.0: Welcome2Pwn</title>
      <link>https://kaligulaarmblessed.github.io/challenges/lnc4-welcome2pwn/</link>
      <pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/lnc4-welcome2pwn/</guid>
      <description>What better way to learn pwn than to go on a trip to the beach? (Because there are shells!)&#xA;Challenge files: https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Welcome2Pwn&#xA;Welcome2Pwn Welcome to the land of pwn! Come follow me to the beach; however, make sure to ignore Sally standing sadly at the side selling shells. Who needs to buy shells when we can pop our own? :D&#xA;But first&amp;hellip; What is pwn? The fancy name for pwn is binary exploitation.</description>
    </item>
    <item>
      <title>Palindromatic -- Dirtypipe [Bi0sCTF 2024]</title>
      <link>https://kaligulaarmblessed.github.io/post/palindromatic-biosctf2024/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/palindromatic-biosctf2024/</guid>
      <description>TLDR Palindromatic is a kernel pwn challenge in Bi0sCTF 2024 involving a null byte overflow vulnerability, cross cache, followed by DirtyPipe. The common kernel protections SMAP, SMEP, KPTI, KASLR are all enabled, with the addition of CONFIG_RANDOM_KMALLOC_CACHES which makes heap spraying more finnicky. Although I did not manage to solve this challenge during the CTF, I thought that this was a really cool challenge and since I wanted to learn how to do a DirtyPipe attack, I made this writeup :D</description>
    </item>
    <item>
      <title>A Deep Dive into Faronics Deep Freeze Enterprise [Legacy Windows Software]</title>
      <link>https://kaligulaarmblessed.github.io/post/faronics-deep-freeze/</link>
      <pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/faronics-deep-freeze/</guid>
      <description>TLDR Faronics Deep Freeze Enterprise version 8.38.220.5256 is vulnerable to a stack buffer overflow vulnerability. It uses 2 XOR encoding schemes, as well as an additional third checksum, to ensure that the packets sent to it are valid. As DEP is enabled, the stack buffer overflow can be exploited by building a ROP chain with a dummy VirtualAlloc skeleton, patching the arguments in, and performing a stack pivot to call VirtualAlloc and finally return to our shellcode.</description>
    </item>
    <item>
      <title>Meowcrosoft Word [STANDCON 2023]</title>
      <link>https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</guid>
      <description>TLDR Meowcrosoft Word is a kernel pwn challenge where only one allocate, one write, and one free is supposed to be possible. However, by exploiting a race condition and blocking/unblocking threads with FUSE (userfaultfd is disabled), privilege escalation from user to root is possible. timerfd_ctx is used to leak the kernel base, msg_msg is used to leak the kernel heap, and pipe buf is used to control RIP and start off a ROP chain to call prepare_kernel_cred() and commit_creds() to get root.</description>
    </item>
    <item>
      <title>STANDCON 2023: Meowcrosoft Word</title>
      <link>https://kaligulaarmblessed.github.io/challenges/standcon2023-meowcrosoft-word/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/standcon2023-meowcrosoft-word/</guid>
      <description>I&amp;rsquo;ve got a new installation of Meowcrosoft Word V1.0 TM! But as part of the #linuxmasterrace, I want to prove that it is vulnerable! Can you help me root this box?&#xA;Challenge files: https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Meowcrosoft_Word&#xA;Writeup: https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</description>
    </item>
    <item>
      <title>nftables Adventures: CVE-2023-31248 -- Oh How The Turn Tables! [Part 2]</title>
      <link>https://kaligulaarmblessed.github.io/post/nftables-adventures-2/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/nftables-adventures-2/</guid>
      <description>TLDR CVE-2023-31248 is an n-day bug affecting nftables reported by Mingi Cho. The bug report and patch can be found here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=515ad530795c118f012539ed76d02bacfd426d89. Linux kernel versions before 6.2.0-26 generic are vulnerable to this bug. My exploit has been tested on Ubuntu 23.04 (Lunar Lobster), with kernel version 6.2.0-20 generic.&#xA;The official version of this writeup can be found at this link: https://starlabs.sg/blog/2023/09-nftables-adventures-bug-hunting-and-n-day-exploitation/&#xA;nfTable of Contents Vulnerability Analysis Triggering the Bug Obtaining a Use-After-Free Obtaining a Kernel Text Leak Obtaining a Heap Leak Controlling RIP Patch Analysis Exploit Demo Acknowledgements References and Credits Vulnerability Analysis nft_chain_lookup_byid does not check whether a chain is active (by checking the genmask) when looking up a chain, as seen in the code below:</description>
    </item>
    <item>
      <title>nftables Adventures: An Introduction to Bug Hunting and the Dormant State Bug [Part 1]</title>
      <link>https://kaligulaarmblessed.github.io/post/nftables-adventures-1/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/nftables-adventures-1/</guid>
      <description>TLDR I tried my hand at bug hunting within the nftables subsystem in the Linux kernel, and managed to find a bug where if the dormant state of a table was toggled in a certain way, the kernel would attempt to deactivate hooks that were never activated in the first place. The bug report can be found here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/netfilter/nf_tables_api.c?id=c9bd26513b3a11b3adb3c2ed8a31a01a87173ff1. Unfortunately (or fortunately), the bug cannot be transformed into a UAF as the kernel performs certain checks that prevents us from reaching any interesting frees.</description>
    </item>
    <item>
      <title>prctl anon_vma_name: An Amusing Linux Kernel Heap Spray</title>
      <link>https://kaligulaarmblessed.github.io/post/prctlheapspray/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/post/prctlheapspray/</guid>
      <description>TLDR prctl PR_SET_VMA (PR_SET_VMA_ANON_NAME) can be used as a (possibly new!) heap spray method targeting the kmalloc-8 to kmalloc-96 caches. The sprayed object, anon_vma_name, is dynamically sized, and can range from larger than 4 bytes to a maximum of 84 bytes. The object can be easily allocated and freed via the prctl syscall, and leaked information can be obtained via reading the proc/pid/maps file. The advantage of this method is that it does not require a cross-cache attack from cg/other caches (unlike other objects such as msg_msg) as anon_vma_name is allocated with the GFP_KERNEL flag.</description>
    </item>
    <item>
      <title>idekCTF 2022*: Gone Fishing</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2022-gone-fishing/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2022-gone-fishing/</guid>
      <description>Fishing is a great hobby; if you look around very very carefully you are bound to get hooked!&#xA;This is a boot2root challenge with a rev twist. Participants were not given source; just run the Docker container!&#xA;Challenge files: https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Gone_Fishing</description>
    </item>
    <item>
      <title>idekCTF 2022*: Sus Meow</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2022-sus-meow/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2022-sus-meow/</guid>
      <description>I see a bunch of cats talking to each other, but what are they really saying?&#xA;Collab challenge with the wonderful Mochi Nishimiya.&#xA;Challenge files: https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Sus_Meow</description>
    </item>
    <item>
      <title>STANDCON 2022: New Math</title>
      <link>https://kaligulaarmblessed.github.io/challenges/standcon2022-newmath/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/standcon2022-newmath/</guid>
      <description>New Math! New Hoo Hoo Math!&#xA;https://www.youtube.com/watch?v=UIKGV2cTgqA&#xA;Challenge files: https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/New_Math</description>
    </item>
    <item>
      <title>CYS Sharing Session: Introduction to ROP</title>
      <link>https://kaligulaarmblessed.github.io/challenges/cys-introduction-to-rop/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/cys-introduction-to-rop/</guid>
      <description></description>
    </item>
    <item>
      <title>idekCTF 2021: Are you lstening to me??</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2021-are-you-lstening-to-me/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2021-are-you-lstening-to-me/</guid>
      <description>Yo lsten! That&amp;rsquo;s the sound of a flag fluttering somewhere&amp;hellip;&#xA;docker pull kaligulasec/idekctf2021:are_you_lstening_to_me</description>
    </item>
    <item>
      <title>idekCTF 2021: Retrosynthesis</title>
      <link>https://kaligulaarmblessed.github.io/challenges/idekctf2021-retrosynthesis/</link>
      <pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/challenges/idekctf2021-retrosynthesis/</guid>
      <description>You can do reverse engineering, but can you do retrosynthesis?&#xA;Challenge files: https://github.com/KaligulaArmblessed/CTF-Challenges/tree/main/Retrosynthesis&#xA;Writeup: https://github.com/KaligulaArmblessed/CTF-Writeups/blob/main/idekCTF%202021/Retrosynthesis.md</description>
    </item>
    <item>
      <title>About</title>
      <link>https://kaligulaarmblessed.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/about/</guid>
      <description>I really like computers, chemistry and cats. :3&#xA;Favicon drawn by the wonderful Cryptsaria.</description>
    </item>
    <item>
      <title>Random Fun Facts</title>
      <link>https://kaligulaarmblessed.github.io/random-facts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kaligulaarmblessed.github.io/random-facts/</guid>
      <description>Just a collection of random fun facts :D&#xA;Gloopy Ethanol I tried explaining ROP chains to an AI Pericyclic Boc Deprotection Ethanol becomes gloopy at low temperatures Did you know that ethanol has a freezing point of -114.1°C :O&#xA;If you cool ethanol down to a decently low temperature (say -50°C and lower), its viscosity will increase quite noticably, and it will turn from a nice flowy liquid to this strange thick gloopy substance.</description>
    </item>
  </channel>
</rss>
