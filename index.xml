<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernels and Cats</title>
    <link>https://kaligulaarmblessed.github.io/</link>
    <description>Recent content on Kernels and Cats</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kaligulaarmblessed.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Meowcrosoft Word [STANDCON 2023]</title>
      <link>https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaligulaarmblessed.github.io/post/meowcrosoft-word/</guid>
      <description>TLDR Meowcrosoft Word is a kernel pwn challenge where only one allocate, one write, and one free is supposed to be possible. However, by exploiting a race condition and blocking/unblocking threads with FUSE (userfaultfd is disabled), as well as using a race condition, privilege escalation from user to root is possible. timerfd_ctx is used to leak the kernel base, msg_msg is used to leak the kernel heap, and pipe buf is used to control RIP and start off a ROP chain to call prepare_kernel_cred() and commit_creds() to get root.</description>
    </item>
    
    <item>
      <title>nftables Adventures: CVE-2023-31248 -- Oh How The Turn Tables! [Part 2]</title>
      <link>https://kaligulaarmblessed.github.io/post/nftables-adventures-2/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaligulaarmblessed.github.io/post/nftables-adventures-2/</guid>
      <description>TLDR CVE-2023-31248 is an n-day bug affecting nftables reported by Mingi Cho. The bug report and patch can be found here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=515ad530795c118f012539ed76d02bacfd426d89. Linux kernel versions before 6.2.0-26 generic are vulnerable to this bug. My exploit has been tested on Ubuntu 23.04 (Lunar Lobster), with kernel version 6.2.0-20 generic.
The official version of this writeup can be found at this link: https://starlabs.sg/blog/2023/09-nftables-adventures-bug-hunting-and-n-day-exploitation/
nfTable of Contents Vulnerability Analysis Triggering the Bug Obtaining a Use-After-Free Obtaining a Kernel Text Leak Obtaining a Heap Leak Controlling RIP Patch Analysis Exploit Demo Acknowledgements References and Credits Vulnerability Analysis nft_chain_lookup_byid does not check whether a chain is active (by checking the genmask) when looking up a chain, as seen in the code below:</description>
    </item>
    
    <item>
      <title>nftables Adventures: An Introduction to Bug Hunting and the Dormant State Bug [Part 1]</title>
      <link>https://kaligulaarmblessed.github.io/post/nftables-adventures-1/</link>
      <pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaligulaarmblessed.github.io/post/nftables-adventures-1/</guid>
      <description>TLDR I tried my hand at bug hunting within the nftables subsystem in the Linux kernel, and managed to find a bug where if the dormant state of a table was toggled in a certain way, the kernel would attempt to deactivate hooks that were never activated in the first place. The bug report can be found here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/netfilter/nf_tables_api.c?id=c9bd26513b3a11b3adb3c2ed8a31a01a87173ff1. Unfortunately (or fortunately), the bug cannot be transformed into a UAF as the kernel performs certain checks that prevents us from reaching any interesting frees.</description>
    </item>
    
    <item>
      <title>prctl anon_vma_name: An Amusing Linux Kernel Heap Spray</title>
      <link>https://kaligulaarmblessed.github.io/post/prctlheapspray/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaligulaarmblessed.github.io/post/prctlheapspray/</guid>
      <description>TLDR prctl PR_SET_VMA (PR_SET_VMA_ANON_NAME) can be used as a (possibly new!) heap spray method targeting the kmalloc-8 to kmalloc-96 caches. The sprayed object, anon_vma_name, is dynamically sized, and can range from larger than 4 bytes to a maximum of 84 bytes. The object can be easily allocated and freed via the prctl syscall, and leaked information can be obtained via reading the proc/pid/maps file. The advantage of this method is that it does not require a cross-cache attack from cg/other caches (unlike other objects such as msg_msg) as anon_vma_name is allocated with the GFP_KERNEL flag.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://kaligulaarmblessed.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaligulaarmblessed.github.io/about/</guid>
      <description>I really like computers, chemistry and cats. :3</description>
    </item>
    
  </channel>
</rss>
